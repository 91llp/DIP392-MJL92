import unittest
from unittest.mock import patch, MagicMock
import tkinter as tk
from pygame import event
import numpy as np

# Assuming the ConnectFourSetup and ConnectFourGame classes are imported here
# from the_game_module import ConnectFourSetup, ConnectFourGame

class TestConnectFourSetup(unittest.TestCase):
    def setUp(self):
        self.root = tk.Tk()
        self.app = ConnectFourSetup(self.root)

    def test_initial_state(self):
        """Test the initial state of the setup window."""
        self.assertEqual(self.app.player_names, ['Player 1', 'Player 2'])
        self.assertEqual(self.app.colors, [(255, 0, 0), (255, 255, 0)])
        self.assertEqual(self.app.columns, 7)
        self.assertEqual(self.app.rows, 6)

    @patch('tkinter.colorchooser.askcolor', return_value=((255, 255, 255), 'white'))
    def test_choose_color(self, mock_colorchooser):
        """Test if choosing a color updates player color."""
        self.app.choose_color(0)
        self.assertEqual(self.app.colors[0], (255, 255, 255))

    @patch('tkinter.messagebox.showerror')
    def test_invalid_columns(self, mock_showerror):
        """Test handling of invalid column input."""
        self.app.column_entry.delete(0, tk.END)
        self.app.column_entry.insert(0, '3')
        self.app.start_game()
        mock_showerror.assert_called_once()

class TestConnectFourGame(unittest.TestCase):
    def setUp(self):
        rows, columns = 6, 7
        player_names = ['Player 1', 'Player 2']
        colors = [(255, 0, 0), (255, 255, 0)]
        self.game = ConnectFourGame(rows, columns, player_names, colors)

    def test_game_initialization(self):
        """Test the initial game board configuration."""
        self.assertEqual(self.game.board.tolist(), np.zeros((6, 7)).tolist())

    def test_valid_location(self):
        """Test if the location check is working for empty columns."""
        self.assertTrue(self.game.is_valid_location(0))

    def test_drop_piece(self):
        """Test dropping a piece in an empty column."""
        self.game.drop_piece(5, 0, 1)
        self.assertEqual(self.game.board[5][0], 1)

    @patch('pygame.event.get', return_value=[MagicMock(type=pygame.QUIT)])
    def test_game_quit(self, mock_event):
        """Test quitting the game."""
        with self.assertRaises(SystemExit):
            self.game.mainloop()

# This is needed to run the tests
if __name__ == '__main__':
    unittest.main()

